version: '3.8'


services:
  postgres:
      image: postgres:11-alpine
      container_name: keycloak-db
      hostname: postgres
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: ${DB_USER}
        POSTGRES_PASSWORD: ${DB_PASSWORD}
        TZ: Europe/Zurich
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U postgres" ]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 20s
      volumes:
        - ./volumes/postgres/data/db:/var/lib/postgresql/data
      restart: always
  mongo:
      image: mongo:4.2.0-bionic
      container_name: mongo
      expose:
        - 27017
      environment:
        MONGO_INITDB_ROOT_USERNAME: ${MONGO_DB_USER}
        MONGO_INITDB_ROOT_PASSWORD: ${MONGO_DB_PASSWORD}
        TZ: Europe/Zurich
      healthcheck:
        test: echo 'db.runCommand("ping").ok' | mongo mongo:27017/test --quiet
        interval: 10s
        timeout: 10s
        retries: 5
        start_period: 20s
      volumes:
        - ./volumes/mongodb/data/db:/data/db
      restart: always
  keycloak:
      image: jboss/keycloak:7.0.0
      hostname: idp
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: ${DB_USER}
        DB_SCHEMA: public
        DB_PASSWORD: ${DB_PASSWORD}
        KEYCLOAK_USER: "${KEYCLOAK_USER}"
        KEYCLOAK_PASSWORD: "${KEYCLOAK_PASSWORD}"
        PROXY_ADDRESS_FORWARDING: "true"
        TZ: Europe/Zurich
        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
        #JDBC_PARAMS: "ssl=true"
      expose:
        - 8080
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/auth"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 40s
      depends_on:
        - postgres
      command:
      - "-b 0.0.0.0"
      volumes:
        - ./keycloak-themes/access:/opt/jboss/keycloak/themes/access
      restart: always
  course-service:
      image: hoal/course-service:${BACKEND_TAG}
      expose:
        - 8080
      depends_on:
        - keycloak
        - mongo
      environment:
        GITHUB_WEBHOOK_SECRET: "${GITHUB_WEBHOOK_SECRET}"
        GITLAB_WEBHOOK_SECRET: "${GITLAB_WEBHOOK_SECRET}"
        DOCKER_HOST: "${DOCKER_WORKER_HOST}"
        DOCKER_CERT_PATH: "/app/docker-certs/"
        KEYCLOAK_USER: "${KEYCLOAK_USER}"
        KEYCLOAK_PASSWORD: "${KEYCLOAK_PASSWORD}"
        KEYCLOAK_HOST: "${AUTH_SERVER}"
        JWK_URI: "${JWK_URI}"
        REALM: "${KEYCLOAK_REALM}"
        MONGO_DB_NAME: ${MONGO_DB_NAME}
        MONGO_DB_USER: ${MONGO_DB_USER}
        MONGO_DB_PASSWORD: ${MONGO_DB_PASSWORD}
        FRONTEND_REALM: ${FRONTEND_REALM}
        REDIRECT_URI_EMAIL: ${REDIRECT_URI_EMAIL}
        BACKEND_VERSION: ${BACKEND_VERSION}
        TZ: Europe/Zurich
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 40s
      volumes:
        - ./docker-certs/:/app/docker-certs/:ro
        - ./.ssh/:/root/.ssh/:ro
        - ./backend-config/repositories.json:/app/access/repositories.json
        - ./logs/:/app/logs/
      restart: always
  frontend:
      image: hoal/frontend:${FRONTEND_TAG}
      ports:
        - 80:80
        - 443:443
      environment:
        TZ: Europe/Zurich
      healthcheck:
        test: [ "CMD", "curl", "-f", "http://localhost:80/" ]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 40s
      volumes:
        - ./nginx/logs/:/etc/nginx/logs/
        - ./nginx/ssl/:/etc/ssl/info1/
        - ./nginx/${NGINX_CONF}:/etc/nginx/nginx.conf
        - ./frontend-config/mime.types:/etc/nginx/mime.types
      restart: always
