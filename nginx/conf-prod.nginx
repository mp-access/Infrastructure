worker_processes 4;
worker_rlimit_nofile 100000;

events {
    worker_connections 4000;
    multi_accept on;
    use epoll;
}

http {
    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # reduce the data that needs to be sent over network -- for testing environment
    gzip on;
    # gzip_static on;
    gzip_min_length 10240;
    gzip_comp_level 2;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
    text/css
    text/javascript
    text/xml
    text/plain
    text/x-component
    application/javascript
    application/x-javascript
    application/json
    application/xml
    application/rss+xml
    application/atom+xml
    font/truetype
    font/opentype
    application/vnd.ms-fontobject
    image/svg+xml;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 10;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    # number of requests client can make over keep-alive -- for testing environment
    keepalive_requests 100000;

    log_format compression '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
    '"$http_x_hub_signature" '
    '"$http_referer" "$http_user_agent" "$gzip_ratio"';

    error_log /etc/nginx/logs/error_log.log warn;

    server {
        listen 80 default_server;

        server_name _;

        return 301 https://$host$request_uri;
    }

    server {
        client_body_buffer_size 10K;
        client_header_buffer_size 1k;
        client_max_body_size 8m;
        #large_client_header_buffers 2 8k;

        root /usr/share/nginx/html;
        listen 443 ssl;
        server_name info1-exercises.ifi.uzh.ch;
        ssl_certificate /etc/ssl/info1/server.crt;
        ssl_certificate_key /etc/ssl/info1/server.key;

        # from https://cipherli.st/
        # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        #ssl_prefer_server_ciphers on;
        #ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        #ssl_ecdh_curve secp384r1;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        #ssl_session_tickets off;
        #ssl_stapling on;
        #ssl_stapling_verify on;
        #resolver 8.8.8.8 8.8.4.4 valid=300s;
        #resolver_timeout 5s;
        # Disable preloading HSTS for now.  You can use the commented out header line that includes
        # the "preload" directive if you understand the implications.
        #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        #add_header X-Frame-Options DENY;
        #add_header X-Content-Type-Options nosniff;

        #ssl_dhparam /etc/nginx/dhparam.pem;

        charset utf-8;
        gzip on;
        access_log /etc/nginx/logs/nginx-access.log compression buffer=32k;

        location / {
            include  mime.types;
            try_files $uri /index.html;
        }

        location /keycloak-prod.json {
            include  mime.types;
            try_files /keycloak-prod.json /keycloak.json =404;
        }

        location /test {
            include  mime.types;
            try_files /keycloak-prod.json /keycloak.json =404;
        }

        location /api {
            proxy_pass http://course-service:8080/api;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Forwarded-Host $server_name;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass_header X-Hub-Signature;
            proxy_pass_request_headers      on;
        }

        location /auth {
            proxy_pass http://idp:8080/auth;
            proxy_set_header    Host               $host;
            proxy_set_header    X-Real-IP          $remote_addr;
            proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Host   info1-exercises.ifi.uzh.ch;
            proxy_set_header    X-Forwarded-Server $host;
            proxy_set_header    X-Forwarded-Port   $server_port;
            proxy_set_header    X-Forwarded-Proto  $scheme;
        }
    }
}